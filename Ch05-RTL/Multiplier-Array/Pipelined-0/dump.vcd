$date
	Mon Jul 13 08:58:25 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module multiplier_tb $end
$var wire 8 ! y [7:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 1 $ clk $end
$var reg 4 % xrnd [3:0] $end
$var reg 8 & yfull [7:0] $end
$var integer 32 ' i [31:0] $end
$var integer 32 ( j [31:0] $end
$scope module uut $end
$var wire 4 ) a [3:0] $end
$var wire 4 * b [3:0] $end
$var wire 1 $ clk $end
$var wire 8 + y [7:0] $end
$var reg 4 , areg [3:0] $end
$var reg 4 - breg [3:0] $end
$var integer 32 . i [31:0] $end
$upscope $end
$scope task xorshift32 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
b0 '
bx &
b1011 %
0$
bx #
bx "
bx !
$end
#2
b11 #
b11 *
b1110 "
b1110 )
b11 %
#3
b101010 &
#5
b11 -
b1110 ,
b100 .
1$
#10
0$
b1 '
b0 (
#12
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#13
b10110 &
#15
b100 .
b1011 -
b10 ,
1$
#16
b10110 !
b10110 +
#20
0$
b10 '
b0 (
#22
b11 #
b11 *
b1110 "
b1110 )
b11 %
#23
b101010 &
#25
b11 -
b1110 ,
b100 .
1$
#30
0$
b11 '
b0 (
#32
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#33
b10110 &
#35
b100 .
b1011 -
b10 ,
1$
#40
0$
b100 '
b0 (
#42
b11 #
b11 *
b1110 "
b1110 )
b11 %
#43
b101010 &
#45
b11 -
b1110 ,
b100 .
1$
#50
0$
b101 '
b0 (
#52
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#53
b10110 &
#55
b100 .
b1011 -
b10 ,
1$
#60
0$
b110 '
b0 (
#62
b11 #
b11 *
b1110 "
b1110 )
b11 %
#63
b101010 &
#65
b11 -
b1110 ,
b100 .
1$
#70
0$
b111 '
b0 (
#72
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#73
b10110 &
#75
b100 .
b1011 -
b10 ,
1$
#80
0$
b1000 '
b0 (
#82
b11 #
b11 *
b1110 "
b1110 )
b11 %
#83
b101010 &
#85
b11 -
b1110 ,
b100 .
1$
#90
0$
b1001 '
b0 (
#92
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#93
b10110 &
#95
b100 .
b1011 -
b10 ,
1$
#100
0$
b1010 '
b0 (
#102
b11 #
b11 *
b1110 "
b1110 )
b11 %
#103
b101010 &
#105
b11 -
b1110 ,
b100 .
1$
#110
0$
b1011 '
b0 (
#112
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#113
b10110 &
#115
b100 .
b1011 -
b10 ,
1$
#120
0$
b1100 '
b0 (
#122
b11 #
b11 *
b1110 "
b1110 )
b11 %
#123
b101010 &
#125
b11 -
b1110 ,
b100 .
1$
#130
0$
b1101 '
b0 (
#132
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#133
b10110 &
#135
b100 .
b1011 -
b10 ,
1$
#140
0$
b1110 '
b0 (
#142
b11 #
b11 *
b1110 "
b1110 )
b11 %
#143
b101010 &
#145
b11 -
b1110 ,
b100 .
1$
#150
0$
b1111 '
b0 (
#152
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#153
b10110 &
#155
b100 .
b1011 -
b10 ,
1$
#160
0$
b10000 '
b0 (
#162
b11 #
b11 *
b1110 "
b1110 )
b11 %
#163
b101010 &
#165
b11 -
b1110 ,
b100 .
1$
#170
0$
b10001 '
b0 (
#172
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#173
b10110 &
#175
b100 .
b1011 -
b10 ,
1$
#180
0$
b10010 '
b0 (
#182
b11 #
b11 *
b1110 "
b1110 )
b11 %
#183
b101010 &
#185
b11 -
b1110 ,
b100 .
1$
#190
0$
b10011 '
b0 (
#192
b1011 #
b1011 *
b10 "
b10 )
b1011 %
#193
b10110 &
#195
b100 .
b1011 -
b10 ,
1$
#200
0$
b1111 #
b1111 *
b1111 "
b1111 )
b10100 '
b0 (
#205
b1111 -
b1111 ,
b100 .
1$
