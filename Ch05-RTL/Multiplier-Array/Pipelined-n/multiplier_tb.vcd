$date
	Mon Jul 13 11:15:05 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 ! \areg[0] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 " \breg[0] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 # \areg[1] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 $ \breg[1] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 % \areg[2] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 & \breg[2] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 ' \areg[3] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 8 ( \breg[3] [7:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 16 ) \partials[0] [15:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 16 * \partials[1] [15:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 16 + \partials[2] [15:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$scope module uut $end
$var reg 16 , \partials[3] [15:0] $end
$upscope $end
$upscope $end
$scope module multiplier_tb $end
$var wire 16 - y [15:0] $end
$var reg 8 . a [7:0] $end
$var reg 8 / b [7:0] $end
$var reg 1 0 clk $end
$var reg 8 1 xrnd [7:0] $end
$var reg 16 2 yfull [15:0] $end
$var integer 32 3 i [31:0] $end
$var integer 32 4 j [31:0] $end
$scope module uut $end
$var wire 8 5 a [7:0] $end
$var wire 8 6 b [7:0] $end
$var wire 1 0 clk $end
$var wire 16 7 y [15:0] $end
$scope begin genblk1[1] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[2] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[3] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[4] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[5] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[6] $end
$scope begin gen $end
$upscope $end
$upscope $end
$scope begin genblk2[7] $end
$scope begin gen $end
$upscope $end
$upscope $end
$upscope $end
$scope task xorshift32 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 7
bx 6
bx 5
bx 4
b0 3
bx 2
b1011 1
00
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
b11101001 /
b11101001 6
b1101111 .
b1101111 5
b11101001 1
#3
b110010100000111 2
#5
bx ,
bx +
bx *
bx (
bx '
bx &
bx %
bx $
bx #
b11101001 "
b1101111 !
b0xxxxxxxx )
10
#10
00
b1 3
b0 4
#12
b1001011 /
b1001011 6
b101010 .
b101010 5
b1001011 1
#13
b110001001110 2
#15
bx ,
bx +
bx *
bx (
bx '
bx &
bx %
b11101001 $
b1101111 #
b11101001 )
b1001011 "
b101010 !
10
#20
00
b10 3
b0 4
#22
b10101011 /
b10101011 6
b1101101 .
b1101101 5
b10101011 1
#23
b100100011001111 2
#25
bx ,
bx +
b1010111011 *
bx (
bx '
b11101001 &
b1101111 %
b1001011 $
b101010 #
b10101011 "
b1101101 !
b0 )
10
#30
00
b11 3
b0 4
#32
b1001001 /
b1001001 6
b1101010 .
b1101010 5
b1001001 1
#33
b1111000111010 2
#35
bx ,
b11001011111 +
b10010110 *
b11101001 (
b1101111 '
b1001011 &
b101010 %
b10101011 $
b1101101 #
b10101011 )
b1001001 "
b1101010 !
10
#40
00
b100 3
b0 4
#42
b11101011 /
b11101011 6
b101111 .
b101111 5
b11101011 1
#43
b10101100100101 2
#45
b110110100111 ,
b10010110 +
b10101011 *
b1001011 (
b101010 '
b10101011 &
b1101101 %
b1001001 $
b1101010 #
b11101011 "
b101111 !
b0 )
10
#50
00
b101 3
b0 4
#52
b1011 /
b1011 6
b1101000 .
b1101000 5
b1011 1
#53
b10001111000 2
#55
b1011101110 ,
b1101010111 +
b10010010 *
b10101011 (
b1101101 '
b1001001 &
b1101010 %
b11101011 $
b101111 #
b11101011 )
b1011 "
b1101000 !
10
#60
00
b110 3
b0 4
#62
b11101001 /
b11101001 6
b1101111 .
b1101111 5
b11101001 1
#63
b110010100000111 2
#65
b100010101111 ,
b10010010 +
b1011000001 *
b1001001 (
b1101010 '
b11101011 &
b101111 %
b1011 $
b1101000 #
b11101001 "
b1101111 !
b0 )
10
#70
00
b111 3
b0 4
#72
b1001011 /
b1001011 6
b101010 .
b101010 5
b1001011 1
#73
b110001001110 2
#75
b1011011010 ,
b11001101101 +
b0 *
b11101011 (
b101111 '
b1011 &
b1101000 %
b11101001 $
b1101111 #
b11101001 )
b1001011 "
b101010 !
10
#80
00
b1000 3
b0 4
#82
b10101011 /
b10101011 6
b1101101 .
b1101101 5
b10101011 1
#83
b100100011001111 2
#85
b110010100000111 -
b110010100000111 7
b110111000101 ,
b0 +
b1010111011 *
b1011 (
b1101000 '
b11101001 &
b1101111 %
b1001011 $
b101010 #
b10101011 "
b1101101 !
b0 )
10
#90
00
b1001 3
b0 4
#92
b1001001 /
b1001001 6
b1101010 .
b1101010 5
b1001001 1
#93
b1111000111010 2
#95
b110001001110 -
b110001001110 7
b1011000 ,
b11001011111 +
b10010110 *
b11101001 (
b1101111 '
b1001011 &
b101010 %
b10101011 $
b1101101 #
b10101011 )
b1001001 "
b1101010 !
10
#100
00
b1010 3
b0 4
#102
b11101011 /
b11101011 6
b101111 .
b101111 5
b11101011 1
#103
b10101100100101 2
#105
b100100011001111 -
b100100011001111 7
b110110100111 ,
b10010110 +
b10101011 *
b1001011 (
b101010 '
b10101011 &
b1101101 %
b1001001 $
b1101010 #
b11101011 "
b101111 !
b0 )
10
#110
00
b1011 3
b0 4
#112
b1011 /
b1011 6
b1101000 .
b1101000 5
b1011 1
#113
b10001111000 2
#115
b1111000111010 -
b1111000111010 7
b1011101110 ,
b1101010111 +
b10010010 *
b10101011 (
b1101101 '
b1001001 &
b1101010 %
b11101011 $
b101111 #
b11101011 )
b1011 "
b1101000 !
10
#120
00
b1100 3
b0 4
#122
b11101001 /
b11101001 6
b1101111 .
b1101111 5
b11101001 1
#123
b110010100000111 2
#125
b10101100100101 -
b10101100100101 7
b100010101111 ,
b10010010 +
b1011000001 *
b1001001 (
b1101010 '
b11101011 &
b101111 %
b1011 $
b1101000 #
b11101001 "
b1101111 !
b0 )
10
#130
00
b1101 3
b0 4
#132
b1001011 /
b1001011 6
b101010 .
b101010 5
b1001011 1
#133
b110001001110 2
#135
b10001111000 -
b10001111000 7
b1011011010 ,
b11001101101 +
b0 *
b11101011 (
b101111 '
b1011 &
b1101000 %
b11101001 $
b1101111 #
b11101001 )
b1001011 "
b101010 !
10
#140
00
b1110 3
b0 4
#142
b10101011 /
b10101011 6
b1101101 .
b1101101 5
b10101011 1
#143
b100100011001111 2
#145
b110010100000111 -
b110010100000111 7
b110111000101 ,
b0 +
b1010111011 *
b1011 (
b1101000 '
b11101001 &
b1101111 %
b1001011 $
b101010 #
b10101011 "
b1101101 !
b0 )
10
#150
00
b1111 3
b0 4
#152
b1001001 /
b1001001 6
b1101010 .
b1101010 5
b1001001 1
#153
b1111000111010 2
#155
b110001001110 -
b110001001110 7
b1011000 ,
b11001011111 +
b10010110 *
b11101001 (
b1101111 '
b1001011 &
b101010 %
b10101011 $
b1101101 #
b10101011 )
b1001001 "
b1101010 !
10
#160
00
b10000 3
b0 4
#162
b11101011 /
b11101011 6
b101111 .
b101111 5
b11101011 1
#163
b10101100100101 2
#165
b100100011001111 -
b100100011001111 7
b110110100111 ,
b10010110 +
b10101011 *
b1001011 (
b101010 '
b10101011 &
b1101101 %
b1001001 $
b1101010 #
b11101011 "
b101111 !
b0 )
10
#170
00
b10001 3
b0 4
#172
b1011 /
b1011 6
b1101000 .
b1101000 5
b1011 1
#173
b10001111000 2
#175
b1111000111010 -
b1111000111010 7
b1011101110 ,
b1101010111 +
b10010010 *
b10101011 (
b1101101 '
b1001001 &
b1101010 %
b11101011 $
b101111 #
b11101011 )
b1011 "
b1101000 !
10
#180
00
b10010 3
b0 4
#182
b11101001 /
b11101001 6
b1101111 .
b1101111 5
b11101001 1
#183
b110010100000111 2
#185
b10101100100101 -
b10101100100101 7
b100010101111 ,
b10010010 +
b1011000001 *
b1001001 (
b1101010 '
b11101011 &
b101111 %
b1011 $
b1101000 #
b11101001 "
b1101111 !
b0 )
10
#190
00
b10011 3
b0 4
#192
b1001011 /
b1001011 6
b101010 .
b101010 5
b1001011 1
#193
b110001001110 2
#195
b10001111000 -
b10001111000 7
b1011011010 ,
b11001101101 +
b0 *
b11101011 (
b101111 '
b1011 &
b1101000 %
b11101001 $
b1101111 #
b11101001 )
b1001011 "
b101010 !
10
#200
00
b11111111 /
b11111111 6
b11111111 .
b11111111 5
b10100 3
b0 4
#205
b110010100000111 -
b110010100000111 7
b110111000101 ,
b0 +
b1010111011 *
b1011 (
b1101000 '
b11101001 &
b1101111 %
b1001011 $
b101010 #
b11111111 "
b11111111 !
b0 )
10
