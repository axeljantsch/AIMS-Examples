$date
	Fri Sep 25 11:57:43 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module adder_tb $end
$var wire 4 ! ssum9e [3:0] $end
$var wire 4 " ssum9d [3:0] $end
$var wire 4 # ssum9c [3:0] $end
$var wire 4 $ ssum8b [3:0] $end
$var wire 4 % ssum8a [3:0] $end
$var wire 4 & ssum7b [3:0] $end
$var wire 4 ' ssum7a [3:0] $end
$var wire 4 ( ssum6 [3:0] $end
$var wire 4 ) ssum4b [3:0] $end
$var wire 4 * ssum4 [3:0] $end
$var wire 4 + ssum3 [3:0] $end
$var wire 4 , ssum2 [3:0] $end
$var wire 4 - ssum11b [3:0] $end
$var wire 4 . ssum11a [3:0] $end
$var wire 4 / ssum1 [3:0] $end
$var wire 1 0 sco9e $end
$var wire 1 1 sco9d $end
$var wire 1 2 sco9c $end
$var wire 1 3 sco8b $end
$var wire 1 4 sco8a $end
$var wire 1 5 sco7b $end
$var wire 1 6 sco7a $end
$var wire 1 7 sco6 $end
$var wire 1 8 sco4b $end
$var wire 1 9 sco4 $end
$var wire 1 : sco3 $end
$var wire 1 ; sco2 $end
$var wire 1 < sco11b $end
$var wire 1 = sco11a $end
$var wire 1 > sco1 $end
$var reg 4 ? sa [3:0] $end
$var reg 4 @ sb [3:0] $end
$var reg 1 A sci $end
$scope module uu1 $end
$var wire 4 B a [3:0] $end
$var wire 4 C b [3:0] $end
$var wire 1 A ci $end
$var reg 1 > co $end
$var reg 4 D sum [3:0] $end
$upscope $end
$scope module uu10 $end
$var wire 4 E a [3:0] $end
$var wire 4 F b [3:0] $end
$var wire 1 A ci $end
$var reg 1 : co $end
$var reg 4 G sum [3:0] $end
$upscope $end
$scope module uu11 $end
$var wire 4 H a [3:0] $end
$var wire 4 I b [3:0] $end
$var wire 1 A ci $end
$var reg 1 2 co $end
$var reg 4 J sum [3:0] $end
$var reg 5 K tmp [4:0] $end
$upscope $end
$scope module uu12 $end
$var wire 4 L a [3:0] $end
$var wire 4 M b [3:0] $end
$var wire 1 A ci $end
$var reg 1 1 co $end
$var reg 4 N sum [3:0] $end
$var reg 5 O tmp [4:0] $end
$upscope $end
$scope module uu13 $end
$var wire 4 P a [3:0] $end
$var wire 4 Q b [3:0] $end
$var wire 1 A ci $end
$var wire 4 R sum [3:0] $end
$var wire 1 9 co $end
$var reg 5 S tmp1 [4:0] $end
$var reg 5 T tmp2 [4:0] $end
$upscope $end
$scope module uu14 $end
$var wire 4 U a [3:0] $end
$var wire 4 V b [3:0] $end
$var wire 1 A ci $end
$var reg 1 0 co $end
$var reg 4 W sum [3:0] $end
$var reg 5 X tmp1 [4:0] $end
$var reg 5 Y tmp2 [4:0] $end
$upscope $end
$scope module uu15 $end
$var wire 4 Z a [3:0] $end
$var wire 4 [ b [3:0] $end
$var wire 1 A ci $end
$var wire 5 \ tmp2 [4:0] $end
$var wire 5 ] tmp1 [4:0] $end
$var wire 4 ^ sum [3:0] $end
$var wire 1 8 co $end
$upscope $end
$scope module uu2 $end
$var wire 4 _ a [3:0] $end
$var wire 4 ` b [3:0] $end
$var wire 1 A ci $end
$var reg 1 6 co $end
$var reg 4 a sum [3:0] $end
$var reg 5 b tmp [4:0] $end
$upscope $end
$scope module uu3 $end
$var wire 4 c a [3:0] $end
$var wire 4 d b [3:0] $end
$var wire 1 A ci $end
$var reg 1 5 co $end
$var reg 4 e sum [3:0] $end
$var reg 5 f tmp [4:0] $end
$upscope $end
$scope module uu4 $end
$var wire 4 g a [3:0] $end
$var wire 4 h b [3:0] $end
$var wire 1 A ci $end
$var reg 1 7 co $end
$var reg 4 i sum [3:0] $end
$upscope $end
$scope module uu5 $end
$var wire 4 j a [3:0] $end
$var wire 4 k b [3:0] $end
$var wire 1 A ci $end
$var reg 1 = co $end
$var reg 4 l sum [3:0] $end
$var reg 5 m tmp [4:0] $end
$upscope $end
$scope module uu6 $end
$var wire 4 n a [3:0] $end
$var wire 4 o b [3:0] $end
$var wire 1 A ci $end
$var reg 1 < co $end
$var reg 4 p sum [3:0] $end
$var reg 5 q tmp [4:0] $end
$upscope $end
$scope module uu7 $end
$var wire 4 r a [3:0] $end
$var wire 4 s b [3:0] $end
$var wire 1 A ci $end
$var reg 1 ; co $end
$var reg 4 t sum [3:0] $end
$upscope $end
$scope module uu8 $end
$var wire 4 u a [3:0] $end
$var wire 4 v b [3:0] $end
$var wire 1 A ci $end
$var reg 1 4 co $end
$var reg 4 w sum [3:0] $end
$var reg 5 x tmp [4:0] $end
$upscope $end
$scope module uu9 $end
$var wire 4 y a [3:0] $end
$var wire 4 z b [3:0] $end
$var wire 1 A ci $end
$var reg 1 3 co $end
$var reg 4 { sum [3:0] $end
$var reg 5 | tmp [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 |
bx {
b0 z
b0 y
bx x
bx w
b0 v
b0 u
bx t
b0 s
b0 r
b0 q
bx p
b0 o
b0 n
bx m
bx l
b0 k
b0 j
bx i
b0 h
b0 g
b0 f
bx e
b0 d
b0 c
bx b
bx a
b0 `
b0 _
bx ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
bx W
b0 V
b0 U
b0 T
b0 S
bx R
b0 Q
b0 P
b0 O
bx N
b0 M
b0 L
bx K
bx J
b0 I
b0 H
bx G
b0 F
b0 E
bx D
b0 C
b0 B
0A
b0 @
b0 ?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#120
03
b0 $
b0 {
b0 x
0;
b0 ,
b0 t
00
b0 !
b0 W
b0 K
0:
b0 +
b0 G
09
b0 *
b0 R
08
b0 )
b0 ^
0<
b0 -
b0 p
0=
b0 .
b0 l
b0 m
07
b0 (
b0 i
05
b0 &
b0 e
06
b0 '
b0 a
b0 b
0>
b0 /
b0 D
#150
02
b0 #
b0 J
b1010 O
b1010 |
b1010 Y
b1010 X
b1010 T
b1010 S
b1010 f
b1010 q
b1010 \
b1010 ]
b1010 ?
b1010 B
b1010 E
b1010 H
b1010 L
b1010 P
b1010 U
b1010 Z
b1010 _
b1010 c
b1010 g
b1010 j
b1010 n
b1010 r
b1010 u
b1010 y
#170
b1101 O
b1101 T
b1101 S
b1101 Y
b1101 X
b1101 \
b1101 ]
b11 @
b11 C
b11 F
b11 I
b11 M
b11 Q
b11 V
b11 [
b11 `
b11 d
b11 h
b11 k
b11 o
b11 s
b11 v
b11 z
#190
b101 O
b101 Y
b101 X
b101 T
b101 S
b101 \
b101 ]
b10 ?
b10 B
b10 E
b10 H
b10 L
b10 P
b10 U
b10 Z
b10 _
b10 c
b10 g
b10 j
b10 n
b10 r
b10 u
b10 y
#210
b10010 O
b10010 T
b10010 S
b10010 Y
b10010 X
b10010 \
b10010 ]
b1111 ?
b1111 B
b1111 E
b1111 H
b1111 L
b1111 P
b1111 U
b1111 Z
b1111 _
b1111 c
b1111 g
b1111 j
b1111 n
b1111 r
b1111 u
b1111 y
#240
b10011 O
b10011 Y
b10011 T
b10011 \
1A
#270
1;
b11 ,
b11 t
04
b0 %
b0 w
b10011 x
b1010 $
b1010 {
b1010 !
b1010 W
b1010 +
b1010 G
b1010 K
01
b0 "
b0 N
1>
b11 /
b11 D
16
b11 '
b11 a
b10011 b
b1010 &
b1010 e
b1010 (
b1010 i
b1010 .
b1010 l
b1010 m
b1010 -
b1010 p
#290
b1101 !
b1101 W
b1010 "
b1010 N
b1101 K
b1101 +
b1101 G
#310
b101 !
b101 W
b101 +
b101 G
b101 K
b1101 "
b1101 N
#330
10
b10 !
b10 W
b101 "
b101 N
b10010 K
1:
b10 +
b10 G
#360
b11 !
b11 W
b11 +
b11 G
b10011 K
11
b10 "
b10 N
19
b11 *
b11 R
18
b11 )
b11 ^
#540
