#!/bin/sh

# This script make synthesis and P&R for the different versions of the GWA FSMs.
# Then the script mkReport.sh makes summary tables in Latex format,
# that can be used in the beamer presentations.
# So far the encoding is not reflected in the file names.

# encoding=binary
encoding=one-hot

allGWAs="GWA_Mealy GWA_Mealy_v2 GWA_Moore GWA_Moore_v2"

doClean=No
doSynthesis=No
doReporting=No

USAGE="`basename $0` [-hcrs] [-E one-hot  | binary ]  \n\
     \t Synthesise the GWA FSM with either onehot or binary encoding and prepare reports. \n\
     \t\t The GWA models considered are $allGWAs. \n\
     \t -s do the synthesis with Yosys.  \n\
     \t -E one-hot | binary: Synthsize the fsm with the given encoding. \n\
     \t\t $encoding is the default.  \n\
     \t -r do reporting.  \n\
     \t -c clean: remove generated files.  \n\
     \t -h help  \n"

while getopts hrscE: c
 do
    case $c in
        E)  encoding=$OPTARG;;
        s)  doSynthesis=Yes;;
        c)  doClean=Yes;;
        r)  doReporting=Yes;;
        h)  echo  $USAGE; exit 2;;
        \?)  echo  $USAGE; exit 2;;
    esac
    done

shift `expr $OPTIND - 1`

resultdir=ScriptResults-$encoding

######################################
# Tests:
######################################

if [ $doClean = "No" -a $doSynthesis = "No" -a $doReporting = "No" ]
then
    echo "One of the options -crs is required."
    echo $USAGE
    exit
fi

if [ $encoding  != "one-hot" -a $encoding != "binary" ]
then echo "Invalid encoding: $encoding. must be either one-hot or binary."
     exit 2
fi

#########################################################################
# Cleaning up:

if [ $doClean = "Yes" ]
then
    if [ -d $resultdir ]
    then rm -rf $resultdir
    fi
fi

#########################################################################
# Synthesis:

if [ $doSynthesis = "Yes" ]
then
    #####################################################################
    # Going into resultdir:
    if [ \! -d $resultdir ]
    then mkdir $resultdir
    fi

    # Copying all required files:
    cp  synthCustom.yosys extractInfoPart.sh getfsmio.awk kiss2dot.py \
	$resultdir
    cd $resultdir
    PATH="./:$PATH"
    
    resultfiles=""

    for srcf in $allGWAs 
    do
	echo " "
	echo "============================"
	echo $srcf

	bsf=$srcf-$encoding
	
	# Copying the source file into working directory:
	cp ../$srcf.v .
	
	dfile2=$bsf-fsmopt
	dfile3=$bsf-fsmsynth
	jsonf=$bsf.json
	ascf=$bsf.asc
	tirf=$bsf.tir 
	tech=lp1k
	npnrlogf=$bsf-pnrlog.rer
	
	if [ $srcf = GWA_Mealy ]
	then
	    idstate="setattr -set fsm_encoding \"auto\" $srcf/z;"
	else
	    idstate=""
	fi
	yosys -q -l $bsf.yosyslog -p "read_verilog $srcf.v; proc; opt; clean; 
              $idstate
              fsm -encoding $encoding -nomap; 
              show -prefix $dfile2 -format dot;
              script synthCustom.yosys; 
              show -prefix $dfile3 -format dot;
              write_json $jsonf;" 

	# Extracting FSMs from the yosys log file:
	extractInfoPart.sh $bsf.yosyslog fsm | getfsmio.awk $bsf.yosyslog | kiss2dot.py > $bsf-fsm.dot

	resultfiles=$resultfiles" "$bsf-fsm.dot
	resultfiles=$resultfiles" "$dfile2.dot
	resultfiles=$resultfiles" "$dfile3.dot

	#######################################################
	# Storing FSM info and synthesis info:
	fsmtxtf=$bsf-fsm.txt
	echo " " >$fsmtxtf
	echo "% Generated by $0" >>$fsmtxtf
	echo "% FSM description for $bsf from yosys log file." >>$fsmtxtf
	echo " " >>$fsmtxtf

	# echo "\\\\begin{lstlisting}[language=shellcode,basicstyle=\\\\tiny]" >>$fsmtxtf
	
	extractInfoPart.sh $bsf.yosyslog fsm | egrep -v '^$' >>$fsmtxtf
	# echo "\\\\end{lstlisting}" >>$fsmtxtf
	resultfiles=$resultfiles" "$fsmtxtf
	
	#######################################################
	# Storing synthesis info:
	synttxtf=$bsf-synth.txt
	echo " " >$synttxtf
	echo "% Generated by $0" >>$synttxtf
	echo "% Resource usage after synthesis for $bsf from yosys log file." >>$synttxtf
	echo " " >>$synttxtf

	# echo "\\\\begin{lstlisting}[language=shellcode]" >>$synttxtf
	
	extractInfoPart.sh $bsf.yosyslog stat >>$synttxtf
	# echo "\\\\end{lstlisting}" >>$synttxtf
	resultfiles=$resultfiles" "$synttxtf
	
	######################################################
	# P&R:
	echo "=== nextpnr"
	nextpnr-ice40 -q --$tech --json $jsonf --asc $ascf --log $npnrlogf
    	
	echo "=== icetime"
	icetime -t -i -d $tech -P cm36 -r $tirf $ascf

    done

    cp $resultfiles ..
    cd ..
    #############################################################################
    echo " "
    echo "Result files in directory $resultdir:"
    echo " "
    echo $resultfiles
    echo " "
    echo "You can copy them to the source directory of the beamer presentation."
fi


#-----------------------------------------------------------------------------
#
# Do the reporting:
#
#-----------------------------------------------------------------------------

if [ $doReporting = "Yes" ]
then
    
    ignorecase=0
    
    resultfiles=""

    #####################################################################
    # Going into resultdir:
    if [ \! -d $resultdir ]
    then echo " ERROR: Result directory $resultdir does not exist."
	 exit 2
    fi

    # Entering working directory:
    echo "Working directory is: $resultdir"
    cd $resultdir

    # Checking if basenames are valid:
    for  srcf in $allGWAs 
    do
	bsf=$srcf-$encoding
	if [ \! -f $bsf.tir ]
	then echo "Error: No tir file for $bsf."
	     exit 2;
	fi
	if [ \! -f $bsf-pnrlog.rer ]
	then echo "Error: No rer file for $bsf."
	     exit 2;
	fi
    done

    #############################################################################
    #############################################################################
    #
    # Extracting resource usage after synthesis from the yosys log files:

    synthlatexf=GWA-Synth-ReportTable.tex

    echo "% "  >$synthlatexf
    echo "% $synthlatexf generated by $0 " >>$synthlatexf
    echo "% "  >>$synthlatexf
    echo "\\\\begin{tabular}{l|*{5}{r}|r}" >>$synthlatexf
    echo "  & DFF & DFFR & DFFS & DFFSR & LUT4 & Cells\\\\\\\\" >>$synthlatexf
    echo "\hline" >>$synthlatexf

    for srcf in $allGWAs
    do
	genbasf=$srcf-$encoding
	yosyslogf=$genbasf.yosyslog
	
	echo "$genbasf   "
	case $srcf in
	    GWA_Mealy)    fsm="GWA Mealy";;
	    GWA_Mealy_v2) fsm="GWA Mealy v2";;
	    GWA_Moore)    fsm="GWA Moore";;
	    GWA_Moore_v2) fsm="GWA Moore v2";;
	esac
	echo -n "$fsm " >>$synthlatexf
	awk '/Printing statistics/ { st=1; }
         /Number of cells/     { if (st==1) nocells=$4; }
         /SB_DFF\>/            { if (st==1) nodff=$2; }
         /SB_DFFR\>/           { if (st==1) nodffr=$2; }
         /SB_DFFS\>/           { if (st==1) nodffs=$2; }
         /SB_DFFSR\>/          { if (st==1) nodffsr=$2; }
         /SB_LUT4\>/           { if (st==1) nolut=$2; }
         END                   { if ((nodff+nodffr+nodffs+nodffsr+nolut) != nocells) {
                                    printf "Error: Sum not equal: %d vs. %d\n",
                                           (nodff+nodffr+nodffs+nodffsr+nolut), nocells;
                                    exit; }
                                 printf " & %d & %d & %d & %d & %d & %d \\\\\n", nodff, nodffr, nodffs, nodffsr, nolut, nocells;}' \
				     $yosyslogf >>$synthlatexf
    done

    echo "\\\\end{tabular}" >>$synthlatexf

    sed -i -e 's/_/\\_/g' $synthlatexf   # Replacing underscore characters

    resultfiles=$resultfiles" "$synthlatexf


    # Print a readable table on the screen from the latex file:
    detex $synthlatexf \
	| grep -v -e '^$' \
	| awk 'BEGIN    {FS="&"; 
                     printf "\n";
                     printf " ================================\n";
                     printf "  Summary after Synthesis:\n";
                     printf " ================================\n";}
           /DFF/ { printf "%15s ", $1;
                      for (i=2;i<=NF;i++) printf $i, " "; 
                      printf "\n";
                      printf "-------------------------------------------------";
                      printf "--------------------------\n";}
           /GWA/  { printf "%-15s  %3d  %3d    %3d   %3d   %3d    %3d\n", 
                           $1, $2, $3, $4, $5, $6, $7;}'

    #############################################################################
    #############################################################################
    #
    # Extracting resource usage after P&R from the .rer and .tir:
    pnrlatexf=GWA-PnR-ReportTable.tex;

    # The header for the latex table file:
    echo "% "  >$pnrlatexf
    echo "% $pnrlatexf generated by $0 " >>$pnrlatexf
    echo "% "  >>$pnrlatexf
    echo "\\\\begin{tabular}{l|rr|rr|rr}" >>$pnrlatexf
    echo "     & Delay (ns) & Logic Levels & \multicolumn{2}{c|}{Logic Cells} & \multicolumn{2}{c}{I/O} \\\\\\\\" >>$pnrlatexf
    echo "\hline" >>$pnrlatexf

    for srcf in $allGWAs
    do
	genbasf=$srcf-$encoding
	tirf=$genbasf.tir
	rerf=$genbasf-pnrlog.rer

	# The latex file:
	fsm=`echo $srcf | sed -e 's/_/ /g'`
	echo -n "$fsm " >>$pnrlatexf
	awk '/Total number of logic levels/ { nrll = $6; }
    	 /Total path delay/ { pathdelay=$4; }
	 END {printf "  &  %5.1f &    %3d ", pathdelay, nrll;}'\
	    $tirf  >> $pnrlatexf
	awk '/Info:[ \t]*ICESTORM_LC:/ { nrlc=$3; sub("/","", nrlc); prlc=$5; sub("%","", prlc);}
         /SB_IO:/ { nrio=$3; sub("/","", nrio); prio=$5; sub("%","", prio); }
         END {printf " &  %4d & (%3d\\%%)  & %5d & (%3d\\%%)\\\\ \n", nrlc, prlc, nrio, prio;}' $rerf  \
	    >> $pnrlatexf
    done

    echo "\\\\end{tabular}" >>$pnrlatexf

    sed -i -e 's/_/\\_/g' $pnrlatexf   # Replacing underscore characters
    
    resultfiles=$resultfiles" "$pnrlatexf

    # Print a readable table on the screen from the latex file:
    detex $pnrlatexf \
	| sed -e 's/(//g' -e 's/)//g' -e 's/2c//g' \
	| grep -v -e '^$' \
	| awk 'BEGIN    {FS="&"; 
                     printf "\n";
                     printf " ================================\n";
                     printf "  Summary after Place and Route:\n";
                     printf " ================================\n";}
           /Delay/ { printf "%15s ", $1;
                      for (i=2;i<=NF;i++) printf $i, " "; 
                      printf "\n";
                      printf "-------------------------------------------------";
                      printf "--------------------------\n";}
           /GWA/  { printf "%-15s   %6.1f      %3d         %3d (%2d%%) %3d (%2d%%)\n", 
                           $1, $2, $3, $4, $5, $6, $7;}'

    cp $resultfiles ..
    cd ..
    
    #############################################################################
    echo " "
    echo " "
    echo "Result files in $resultdir are "
    echo " "
    echo "   "$resultfiles
    echo " "
    echo "You can copy them to the source directory of the beamer presentation."

fi
